@testset "lq_approx.jl" begin

    @testset "QuantEcon LQ Lecture Example" begin
        # Set parameters
        α, β, ρ1, ρ2, σ = 10.0, 0.95, 0.9, 0.0, 1.0

        R = 1 / β
        A = [1.0 0.0 0.0;
               α  ρ1  ρ2;
            0.0 1.0 0.0]
        A12 = zeros(3,1)
        ALQ_l = hcat(A, A12)
        ALQ_r = [0 -R 0 R]
        ALQ = vcat(ALQ_l, ALQ_r)

        RLQ = [0.0 0.0 0.0 0.0;
               0.0 0.0 0.0 0.0;
               0.0 0.0 0.0 0.0;
               0.0 0.0 0.0 1e-9]

        QLQ = 1.0
        BLQ = [0.0; 0.0; 0.0; R]
        β_LQ = β

        f(s, x) = -([1, s...]' * RLQ * [1, s...] + x' * QLQ * x);
        g(s, x) = ALQ * [1, s...] + BLQ * x;

        s_star, x_star = [1.0, 10.9, 1.0], 0.0;

        f_star = f(s_star, x_star)
        Df_star = [0.0, 0.0, -2.0e-9, 0.0]
        D²f_star =  [0.0 0.0 0.0 0.0;
                     0.0 0.0 0.0 0.0;
                     0.0 0.0 -2.0e-9 0.0;
                     0.0 0.0 0.0 -2.0]
        g_star = g(s_star, x_star)[2:end]
        Dg_star = [0.9 0.0 0.0 0.0;
                   1.0 0.0 0.0 0.0;
                   -1.052631578947368 0.0 1.052631578947368 1.052631578947368]

       lq = approx_lq(s_star, x_star, f_star, Df_star, D²f_star, g_star,
                      Dg_star, β)

       @test isapprox(lq.R, RLQ)
       @test isapprox(lq.Q, [QLQ])
       @test isapprox(lq.A, ALQ)
       @test isapprox(lq.B, BLQ)
    end

    @testset "One State and One Action Variable Example" begin
        A = [1.0 0.0;
             0.5 0.9];

        R = [5.0 0.0;
             0.0 0.3]

        N = [0.05 0.1]

        Q = [0.1];

        B = [0.0; 1.5];

        f(s, x) = -([1, s...]' * R * [1, s...] .+ x' * Q * x
                    .+ 2 * x' * N * [1, s...]);
        g(s, x) = A * [1, s...] + B * x;

        s_star = 5.0;
        x_star = 0.0;

        g_star = g(s_star, x_star)[2];
        f_star = f(s_star, x_star)[1];

        Df_star = [-3.0;
                   -1.1];
        D²f_star = [-0.6 -0.2;
                    -0.2 -0.2]
        Dg_star = [0.9 1.5];

        lq = approx_lq(s_star, x_star, f_star, Df_star, D²f_star, g_star,
                       Dg_star, 1.0)

        @test isapprox(lq.R, R)
        @test isapprox(lq.Q, Q)
        @test isapprox(lq.A, A)
        @test isapprox(lq.B, B)
        @test isapprox(lq.N, N)
    end

    @testset "One State and Two Action Variables Example" begin
        A = [1.0 0.0;
               0.5 0.9];

        R = [5.0 0.0;
               0.0 0.3]

        N = [0.05 0.1;
                0.01 0.02]

        Q = [0.1 -0.05;
                -0.05 0.3];

        B = [0.0 0.0; 1.5 -0.9];

        f(s, x) = -([1, s...]' * R * [1, s...] .+ x' * Q * x
                    .+ 2 * x' * N * [1, s...]);
        g(s, x) = A * [1, s...] + B * x;

        x_star = [0.0, 0.0];
        s_star = 5.0;

        g_star = g(s_star, x_star)[2];
        f_star = f(s_star, x_star)[1];

        Df_star = [-3.0;
                   -1.1;
                   -0.22];
        D²f_star = [-0.6 -0.2 -0.04;
                    -0.2 -0.2 0.1;
                    -0.04 0.1 -0.6]
        Dg_star = [0.9 1.5 -0.9];

        lq = approx_lq(s_star, x_star, f_star, Df_star, D²f_star, g_star,
                       Dg_star, 1.0)

        @test isapprox(lq.R, R)
        @test isapprox(lq.Q, Q)
        @test isapprox(lq.A, A)
        @test isapprox(lq.B, B)
        @test isapprox(lq.N, N)

    end

    @testset "Three States and Two Action Variables Example" begin
        A = [1.0 0.0 0.0 0.0;
             -0.2 0.5 0.01 0.0;
             0.05 -0.5 0.8 0.3;
            -0.1 -0.2 0.3 0.6];

        R = [5.0 0.00 0.00 0.00;
             0.0 0.15 0.21 -0.05;
             0.0 0.21 0.5 -0.01;
             0.0 -0.05 -0.01 0.8]

        N = [-0.1 0.005 -0.15 -0.2;
             0.005 -0.15 -0.2 0.2]

        Q = [1.0 -0.5;
             -0.5 0.9];

        B = [0.0 0.0;
             0.3 0.5;
             0.0 0.2;
             0.1 0.3];

       f(s, x) = ([1, s...]' * R * [1, s...] + x' * Q * x
                  + 2 * x' * N * [1, s...]);
       g(s, x) = A * [1, s...] + B * x;

       s_star = [-0.7916666666666763, -19.583333333333226, -14.541666666666579];
       x_star = [0.0, 0.0];

       g_star = g(s_star, x_star)[2:end];  # Drop constant
       f_star = f(s_star, x_star);

       Df_star = [-7.008333333332452;
                  -19.62499999999752;
                  -22.79583333333047;
                  11.483749999998526;
                  2.264166666666381];

       D²f_star = [0.3 0.42 -0.1 0.01 -0.3;
                   0.42 1.0 -0.02 -0.3 -0.4;
                   -0.1 -0.02 1.6 -0.4 0.4;
                   0.01 -0.3 -0.4 2.0 -1.0;
                   -0.3 -0.4 0.4 -1.0 1.8];

       Dg_star = [0.5 0.01 0.0 0.3 0.5;
                  -0.5 0.8 0.3 0.0 0.2;
                  -0.2 0.3 0.6 0.1 0.3];

       lq = approx_lq(s_star, x_star, f_star, Df_star, D²f_star, g_star,
                      Dg_star, 1.0);

        @test isapprox(-lq.R, R)
        @test isapprox(-lq.Q, Q)
        @test isapprox(lq.A, A)
        @test isapprox(lq.B, B)
        @test isapprox(-lq.N, N)

    end

    @testset "Monetary Policy Example" begin  # See 9.4.6
        vlq =  1.0e+02 * [-1.516771891935916  # Obtained from Fackler's code
                          -1.421873224803633
                          -1.253495277719767
                          -1.054476825045721
                          -0.919716533913779
                          -0.849214404323941
                          -0.842970436276206
                          -0.900984629770574
                          -0.975359737401322
                          -1.023256984807047
                          -1.350214126639643
                          -1.257350153002016
                          -1.093041592907463
                          -0.900127220717386
                          -0.771471010069413
                          -0.707072960963543
                          -0.706933073399777
                          -0.771051347378114
                          -0.849495841998174
                          -0.899427782898555
                          -1.056517641369012
                          -0.967723054720698
                          -0.811553268604770
                          -0.630847057382630
                          -0.514399007702594
                          -0.462209119564662
                          -0.474277392968833
                          -0.550603827915108
                          -0.637187096513793
                          -0.691188424403486
                          -0.714520526767850
                          -0.631830020603504
                          -0.487868395455513
                          -0.325474425685280
                          -0.227338617457150
                          -0.193460970771124
                          -0.223841485627201
                          -0.318480162025382
                          -0.417271591592004
                          -0.477376999965666
                          -0.490780548132429
                          -0.414194122452051
                          -0.282440658271998
                          -0.138358929953671
                          -0.058535363177447
                          -0.042969957943327
                          -0.091662714251310
                          -0.204613632101397
                          -0.315613222635957
                          -0.381822711493587
                          -0.385297705462748
                          -0.314815360266339
                          -0.195270057054223
                          -0.069500570187802
                          -0.007989244863485
                          -0.010736081081270
                          -0.077741078841160
                          -0.209004238143153
                          -0.332211989645650
                          -0.404525558987249
                          -0.398071998758808
                          -0.333693734046368
                          -0.226356591802190
                          -0.118899346387675
                          -0.075700262515263
                          -0.096759340184955
                          -0.182076579396751
                          -0.331651980150650
                          -0.467067892621084
                          -0.545485542446652
                          -0.529103428020609
                          -0.470829243792138
                          -0.375700262515897
                          -0.286555258553288
                          -0.261668416132782
                          -0.301039735254381
                          -0.404669215918082
                          -0.572556858123887
                          -0.720180931562259
                          -0.804702661871796
                          -0.682156123064999
                          -0.627951325825841
                          -0.540961118528224
                          -0.464024275533553
                          -0.451345594080985
                          -0.502925074170520
                          -0.618762715802159
                          -0.798858518975902
                          -0.954621366392899
                          -1.043212483691748
                          -0.778391993248151
                          -0.726221889503649
                          -0.643301069195345
                          -0.572468306684642
                          -0.565893705716043
                          -0.623577266289547
                          -0.745518988405155
                          -0.931718872062866
                          -1.091551106469175
                          -1.182176917262681]

        bet = [0.8 0.5; 0.2 0.6]
        gamm = [-0.8, 0.0]
        Omega = [0.3 0.0; 0.0 1.0]
        s_target = [0., 1.]
        alpha = [0.9, 0.4]
        Sigma = 0.04 * Matrix(I, 2, 2)
        discount = 0.9;

        k = [3, 3];
        m = [10, 10];
        breaks = m - (k.-1);
        s_min = [-15, -10];
        s_max = [15, 10];
        basis = Basis(map(SplineParams, breaks, s_min, s_max, k)...);

        s_star = [0., 1.];  # steady-state states
        x_star = (s_star[1] - alpha[1] - dot(bet[1,:],  s_star)) / gamm[1];
        e_star = [0.0, 0.0];

        f(s, x) = -(s - s_target)' * Omega * (s - s_target) / 2
        g(s, x, e) = alpha + bet * s + gamm * x + e

        f_star = f(s_star, x_star)
        Df_star = [0.0, 0.0, 0.0]
        D²f_star = [-0.3 0.0 0.0;
                    0.0 -1.0 0.0;
                    0.0 0.0 0.0]
        g_star = g(s_star, x_star, e_star)
        Dg_star = [0.8 0.5 -0.8;
                   0.2 0.6 0.0]

        lq = approx_lq(s_star, x_star, f_star, Df_star, D²f_star, g_star,
                       Dg_star, discount);

        P, F, d = stationary_values(lq)

        states = [ones(100) nodes(basis)[1]]
        vlq_approx = -[states[i, 1:3]' * P * states[i, 1:3] for i ∈ 1:100]

        @test isapprox(vlq_approx, vlq)
    end

end
